if(COMPILER_TOOLCHAIN STREQUAL "gcc")
    set(gcc_install "gcc-install")
    set(binutils "gcc-binutils")
    set(gcc_wrapper "gcc-wrapper")
elseif(COMPILER_TOOLCHAIN STREQUAL "clang")
    set(llvm_wrapper "llvm-wrapper")
    set(llvm_libcxx "llvm-libcxx")
    set(cfguard "--enable-cfguard")
    if(LLVM_CCACHE_BUILD)
        set(llvm_ccache "-DLLVM_CCACHE_BUILD=ON -DLLVM_CCACHE_DIR=${LLVM_CCACHE_DIR} -DLLVM_CCACHE_MAXSIZE=${LLVM_CCACHE_MAXSIZE}")
    endif()
    if(LLVM_ENABLE_LTO STREQUAL "Thin")
        set(llvm_lto "-flto=thin -fwhole-program-vtables -fsplit-lto-unit")
    elseif(LLVM_ENABLE_LTO STREQUAL "Full")
        set(llvm_lto "-flto=full -fwhole-program-vtables -fsplit-lto-unit")
    endif()
    if(LLVM_ENABLE_PGO STREQUAL "GEN")
        set(llvm_pgo "-fprofile-generate=${LLVM_PROFILE_DATA_DIR} -fprofile-update=atomic -mllvm -vp-counters-per-site=8")
    elseif(LLVM_ENABLE_PGO STREQUAL "CSGEN")
        set(llvm_pgo "-fcs-profile-generate=${LLVM_PROFILE_DATA_DIR} -fprofile-update=atomic -mllvm -vp-counters-per-site=8 -fprofile-use=${LLVM_PROFDATA_FILE}")
    elseif(LLVM_ENABLE_PGO STREQUAL "USE")
        set(llvm_pgo "-fprofile-use=${LLVM_PROFDATA_FILE}")
    endif()
    if(LLVM_ENABLE_2MB_ALIGN)
        set(llvm_linker_flags "-Wl,-zcommon-page-size=2097152,-zmax-page-size=2097152,-zseparate-loadable-segments")
    endif()
    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag(-mtls-dialect=gnu2 TLSDESC_AVAILABLE)
    if(TLSDESC_AVAILABLE)
        set(tlsdesc "-mtls-dialect=gnu2")
    endif()
    set(llvm_mllvm "-mllvm -enable-masked-interleaved-mem-accesses -mllvm -enable-interleaved-mem-accesses -mllvm -extra-vectorizer-passes -mllvm -enable-cond-stores-vec -mllvm -slp-vectorize-hor-store")
    set(llvm_mllvm "${llvm_mllvm} -mllvm -enable-loopinterchange -mllvm -enable-loop-distribute -mllvm -enable-unroll-and-jam -mllvm -enable-loop-flatten -mllvm -unroll-runtime-multi-exit -mllvm -aggressive-ext-opt")
    set(llvm_mllvm "${llvm_mllvm} -mllvm -adce-remove-loops -mllvm -enable-ext-tsp-block-placement -mllvm -enable-gvn-hoist -mllvm -enable-dfa-jump-thread -mllvm -vectorizer-maximize-bandwidth")
    set(llvm_mllvm_ld "-Wl,-mllvm,-enable-masked-interleaved-mem-accesses,-mllvm,-enable-interleaved-mem-accesses,-mllvm,-extra-vectorizer-passes,-mllvm,-enable-cond-stores-vec,-mllvm,-slp-vectorize-hor-store")
    set(llvm_mllvm_ld "${llvm_mllvm_ld} -Wl,-mllvm,-enable-loopinterchange,-mllvm,-enable-loop-distribute,-mllvm,-enable-unroll-and-jam,-mllvm,-enable-loop-flatten,-mllvm,-unroll-runtime-multi-exit,-mllvm,-aggressive-ext-opt")
    set(llvm_mllvm_ld "${llvm_mllvm_ld} -Wl,-mllvm,-adce-remove-loops,-mllvm,-enable-ext-tsp-block-placement,-mllvm,-enable-gvn-hoist,-mllvm,-enable-dfa-jump-thread,-mllvm,-vectorizer-maximize-bandwidth")
endif()

if(TARGET_CPU STREQUAL "x86_64")
    set(ld_m_flag "i386pep")
    set(crt_lib "--disable-lib32 --enable-lib64")
    set(clang_cfi "-mguard=cf")
    set(lld_cfi "-Xlink=-guard:cf,longjmp -Xlink=-cetcompat")
elseif(TARGET_CPU STREQUAL "i686")
    set(ld_m_flag "i386pe")
    set(crt_lib "--enable-lib32 --disable-lib64")
elseif(TARGET_CPU STREQUAL "aarch64")
    set(ld_m_flag "arm64pe")
    set(crt_lib "--disable-lib32 --disable-lib64 --enable-libarm64")
    set(clang_cfi "-mguard=cf")
    set(lld_cfi "-Xlink=-guard:cf,longjmp -Xlink=-cetcompat")
endif()
